// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package repositories

import (
	"context"
	"time"
	"service/pkg/errors"
	"service/global"
	"service/i18n/i18n_interfaces"
	"database/sql"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  user_id, created_at
) VALUES (
  $1, $2
)
RETURNING id, user_id, created_at
`

type CreateTokenParams struct {
	UserID    int32     `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	translator := ctx.Value(g.TranslatorKey).(i18n_interfaces.TranslatorI)
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.CreatedAt)
	var i Token
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	if err != nil && err != sql.ErrNoRows {
		panic(errors.New(errors.UnexpectedStatus, translator.StatusCodes().InternalServerError(), err.Error()))
	}
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, created_at FROM tokens WHERE id = $1
`

func (q *Queries) GetToken(ctx context.Context, id int32) (Token, error) {
	translator := ctx.Value(g.TranslatorKey).(i18n_interfaces.TranslatorI)
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i Token
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	if err != nil && err != sql.ErrNoRows {
		panic(errors.New(errors.UnexpectedStatus, translator.StatusCodes().InternalServerError(), err.Error()))
	}
	return i, err
}
