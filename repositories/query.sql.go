// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package repositories

import (
	"context"
	"database/sql"
	"time"
)

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO tokens (
  token, is_refresh_token, user_id, expires_at, created_at
) VALUES (
  $1, FALSE, $2, $3, $4
)
RETURNING id, token, is_refresh_token, user_id, expires_at, created_at
`

type CreateAccessTokenParams struct {
	Token     string    `json:"token"`
	UserID    int32     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createAccessToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.IsRefreshToken,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO tokens (
  token, is_refresh_token, user_id, expires_at, created_at
) VALUES (
  $1, TRUE, $2, $3, $4
)
RETURNING id, token, is_refresh_token, user_id, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	UserID    int32     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.IsRefreshToken,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, phone_number, email, password, profile, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, otp_remaining_attempts, otp_code, otp_due_date, is_superuser, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.Profile,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.OtpRemainingAttempts,
		&i.OtpCode,
		&i.OtpDueDate,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const loginUserWithEmail = `-- name: LoginUserWithEmail :one
SELECT id, phone_number, email, password, profile, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, otp_remaining_attempts, otp_code, otp_due_date, is_superuser, created_at FROM users WHERE email = $1
`

func (q *Queries) LoginUserWithEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.Profile,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.OtpRemainingAttempts,
		&i.OtpCode,
		&i.OtpDueDate,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const loginUserWithPhoneNumber = `-- name: LoginUserWithPhoneNumber :one
SELECT id, phone_number, email, password, profile, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, otp_remaining_attempts, otp_code, otp_due_date, is_superuser, created_at FROM users WHERE phone_number = $1
`

func (q *Queries) LoginUserWithPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUserWithPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.Profile,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.OtpRemainingAttempts,
		&i.OtpCode,
		&i.OtpDueDate,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (
  phone_number, email, display_name, password, created_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, phone_number, email, password, profile, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, otp_remaining_attempts, otp_code, otp_due_date, is_superuser, created_at
`

type RegisterUserParams struct {
	PhoneNumber string         `json:"phone_number"`
	Email       sql.NullString `json:"email"`
	DisplayName string         `json:"display_name"`
	Password    string         `json:"password"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.PhoneNumber,
		arg.Email,
		arg.DisplayName,
		arg.Password,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.Profile,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.OtpRemainingAttempts,
		&i.OtpCode,
		&i.OtpDueDate,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}
