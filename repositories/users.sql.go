// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package repositories

import (
	"context"
	"database/sql"
	"time"
)

const confirmEmail = `-- name: ConfirmEmail :one
UPDATE users SET email_verified = TRUE WHERE id = $1 RETURNING id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at
`

func (q *Queries) ConfirmEmail(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, confirmEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const confirmPhoneNumber = `-- name: ConfirmPhoneNumber :one
UPDATE users SET phone_number_verified = TRUE WHERE id = $1 RETURNING id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at
`

func (q *Queries) ConfirmPhoneNumber(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, confirmPhoneNumber, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWithTokenId = `-- name: GetUserWithTokenId :one
SELECT u.id, u.phone_number, u.phone_number_verified, u.email, u.email_verified, u.password, u.avatar, u.first_name, u.last_name, u.display_name, u.gender, u.is_active, u.registered, u.deactivation_reason, u.is_admin, u.params, u.is_superuser, u.created_at FROM users u JOIN tokens t ON u.id = t.user_id WHERE t.id = $1
`

func (q *Queries) GetUserWithTokenId(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithTokenId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.PhoneNumberVerified,
			&i.Email,
			&i.EmailVerified,
			&i.Password,
			&i.Avatar,
			&i.FirstName,
			&i.LastName,
			&i.DisplayName,
			&i.Gender,
			&i.IsActive,
			&i.Registered,
			&i.DeactivationReason,
			&i.IsAdmin,
			&i.Params,
			&i.IsSuperuser,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUserWithEmail = `-- name: LoginUserWithEmail :one
SELECT id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at FROM users WHERE email = $1
`

func (q *Queries) LoginUserWithEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const loginUserWithPhoneNumber = `-- name: LoginUserWithPhoneNumber :one
SELECT id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at FROM users WHERE phone_number = $1
`

func (q *Queries) LoginUserWithPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUserWithPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (
  phone_number, email, display_name, password, created_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at
`

type RegisterUserParams struct {
	PhoneNumber string         `json:"phone_number"`
	Email       sql.NullString `json:"email"`
	DisplayName string         `json:"display_name"`
	Password    string         `json:"password"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.PhoneNumber,
		arg.Email,
		arg.DisplayName,
		arg.Password,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const updateAvatar = `-- name: UpdateAvatar :one
UPDATE users SET avatar = $1 WHERE id = $2 RETURNING id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at
`

type UpdateAvatarParams struct {
	Avatar sql.NullString `json:"avatar"`
	ID     int32          `json:"id"`
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAvatar, arg.Avatar, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const updateMe = `-- name: UpdateMe :one
UPDATE users SET first_name = $1, last_name = $2, display_name = $3, gender = $4 WHERE id = $5 RETURNING id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at
`

type UpdateMeParams struct {
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	DisplayName string         `json:"display_name"`
	Gender      int32          `json:"gender"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateMe(ctx context.Context, arg UpdateMeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateMe,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.Gender,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserParams = `-- name: UpdateUserParams :one
UPDATE users SET params = $1 WHERE id = $2 RETURNING id, phone_number, phone_number_verified, email, email_verified, password, avatar, first_name, last_name, display_name, gender, is_active, registered, deactivation_reason, is_admin, params, is_superuser, created_at
`

type UpdateUserParamsParams struct {
	Params sql.NullString `json:"params"`
	ID     int32          `json:"id"`
}

func (q *Queries) UpdateUserParams(ctx context.Context, arg UpdateUserParamsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserParams, arg.Params, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Avatar,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Gender,
		&i.IsActive,
		&i.Registered,
		&i.DeactivationReason,
		&i.IsAdmin,
		&i.Params,
		&i.IsSuperuser,
		&i.CreatedAt,
	)
	return i, err
}
